word  0x4570FEED

jal   zr, bl_enter

BL_DE_NO_ERR equ 0
BL_DE_INT_NF equ 1
BL_DE_INT_RL equ 2
BL_DE_INT_IL equ 3
BL_DE_INT_SK equ 4
BL_DE_INT_WS equ 5
BL_DE_INT_RS equ 6
BL_DE_INT_IS equ 7
BL_DE_IVALG  equ 0x11
BL_DE_IVSEC  equ 0x12
BL_DE_IVSIZ  equ 0x13

; a0 in  disk address
; a1 in  disk error
bl_disk_set_error:
  stw   a1, a0, zr, 0
  jal   la, zr, 0

; a0 in  disk address
; a0 out disk error
bl_disk_get_error:
  ldw   a0, a0, zr, 0
  jal   la, zr, 0

; a0 in  disk address
; a0 out disk address
; a1 out disk length
; a2 out disk sector
; a3 out disk sectors
bl_disk_load_meta:
  ldw   a1, a0, zr, 0x4
  ldw   a2, a0, zr, 0x8
  div   a3, a1, zr, 0x200
  jal   la, zr, 0

; a0 in  disk address
; a1 in  disk sector
; a0 out disk address
; a1 out disk sector
; a2 out disk error
bl_disk_load_sector:
  stw   a1, a0, zr, 0x8
  jal   la, zr, 0

; a0 in  disk address
; a1 in  disk sector
; a2 in  disk offset
; a0 out disk address
; a1 out disk next sector
; a2 out disk next offset
; a3 out disk error
; a4 out data
bl_disk_load_word:
  psw   sp, la, 0

  ; check alignment
  and   a2, a2, zr, 0x3
  beq   a2, zr, bl_disk_load_word_1
  psw   sp, zr, 0
  psw   sp, zr, BL_DE_IVALG
  rjal  zr, bl_disk_load_word_0

bl_disk_load_word_1:

  ; reset error
  add   a1, zr, zr, BL_DE_NO_ERR
  psw   sp, a1, 0
  add   a1, a3, zr, 0
  rjal  la, bl_disk_set_error
  plw   sp, a1

  ; load metadata
  psw   sp, a1, 0
  psw   sp, a2, 0
  rjal  la, bl_disk_load_meta
  add   t1, a2, zr, 0 ; sector
  add   t2, a3, zr, 0 ; sectors
  plw   sp, a2
  plw   sp, a1

  ; check the current sector
  beq   t1, a1, bl_disk_load_word_2

  ; check the sector
  ublt  a1, t1, bl_disk_load_word_3
  psw   sp, zr, 0
  psw   sp, zr, BL_DE_IVSEC
  rjal  zr, bl_disk_load_word_0

bl_disk_load_word_3:

  ; load the sector
  rjal  la, bl_disk_load_sector 

bl_disk_load_word_2:

  ; load word from disk
  ldw   a4, a0, a2, 0x200

  ; increment offset
  add   a2, a2, zr, 4

  ; check offset
  add   t0, zr, zr, 0x200
  ublt  a2, t0, bl_disk_load_word_4
  add   a1, a1, zr, 1
  xor   a2, a2, zr, 0

bl_disk_load_word_4:
  psw   sp, a4, 0
  psw   sp, a3, 0

bl_disk_load_word_0:
  plw   sp, a3
  plw   sp, a4
  plw   sp, la
  jal   la, zr, 0

; a0 in  disk address
; a1 in  source address
; a2 in  destination address
; a3 in  source length (words)
; a0 out length (words)
; a1 out error
bl_disk_load_section:
  psw   sp, la, 0
  
  add   s0, a2, zr, 0     ; destination
  add   s1, a3, zr, 0     ; length
  add   s2, a3, zr, 0     ; length (copy)

  and   a2, a1, zr, 0x1FF ; disk offset
  shl   a1, a1, zr, 9     ; disk sector

bl_disk_load_section_1:
  add   a3, zr, zr, BL_DE_NO_ERR

  psw   sp, a3
  beq   s1, zr, bl_disk_load_section_0
  plw   sp, zr

  rjal  la, bl_disk_load_word
  psw   sp, a3
  bne   a3, zr, bl_disk_load_section_0
  plw   sp, zr

  ldw   a4, s0, zr, 0
  add   s0, s0, zr, 1
  sub   s1, s1, zr, 1
  rjal  zr, bl_disk_load_section_1

bl_disk_load_section_0
  sub  a0, s2, s1, 0
  plw  sp, a1
  plw  sp, la
  jal  la, zr, 0

BL_CDROM_0 equ 0x20000400
BL_CDROM_1 equ 0x20000800

; a0 in  magic number
; a0 out disk address
; a1 out disk sector
; a2 out disk offset
; a3 out found 
bl_boot_from_cdroms:
  psw   sp, la, 0

  add   s0, zr, zr, 0x400
  add   s1, zr, zr, 0x800
  add   s2, zr, zr, 0x200
  shl   s2, s2, zr, 20
  add   s3, zr, zr, 0
  
  or    s6, s2, s0, 0
  or    s7, s2, s1, 0
  
  add   a0, s6, zr, 0
  add   a1, zr, zr, 0
  add   a2, zr, zr, 0

bl_boot_from_cdroms_1:
  add   a3, zr, zr, BL_DE_NO_ERR
  rjal  la, bl_disk_load_word
  bne   a3, zr, bl_boot_from_cdroms_0
  beq   a4, s4, bl_boot_from_cdroms_found
  add   a1, a1, zr, 1
  rjal  zr, bl_boot_from_cdroms_1

bl_boot_from_cdroms_0:
  beq   a0, s7, bl_boot_from_cdroms_not_found
  add   a0, s7, zr, 0
  add   a1, zr, zr, 0
  add   a2, zr, zr, 0
  rjal  zr, bl_boot_from_cdroms_1

bl_boot_from_cdroms_found:
  plw   sp, la
  add   a3, zr, zr, 1
  jal   la, zr, 0

bl_boot_from_cdroms_not_found:
  plw   sp, la
  add   a3, zr, zr, 0
  jal   la, zr, 0

bl_enter:
  ; __sp__ = 0x80000200
  movl  sp, zr, 0x0200
  movh  sp, sp, 0x8000
  
  ; __fp__ = __sp__
  add   fp, sp, zr, 0
  add   a0, fp, zr, 0
  rjal  zr, bl_main
  beq   a0, zr, bl_leave

bl_halt:
  secsr csr0, zr, 0x1, 2, 0x0
  rst   0

bl_leave:
  add   la, fp, zr, 0
  jal   la, zr, 0
  rjal  zr, bl_halt

bl_main:
  psw   sp, la, 0
  psw   sp, a0, 0
  
  rjal  la, bl_boot_from_cdroms
  beq   a3, zr, bl_main_not_found

  add   a3, zr, zr, BL_DE_NO_ERR
  rjal  la, bl_disk_load_word
  add   t0, zr, zr, BL_DE_NO_ERR
  bne   a3, t0, bl_main_not_found

  shl   a1, a1, zr, 9
  or    a1, a1, a2, 0
  plw   sp, a2
  add   a3, a4, zr, 0
  rjal  la, bl_disk_load_section
  add   t0, zr, zr, BL_DE_NO_ERR
  bne   a3, t0, bl_main_not_found

  rjal  zr, bl_main_0

bl_main_not_found:
  add   a0, zr, zr, 1

bl_main_0:
  plw   sp, la
  jal   la, zr, 0
